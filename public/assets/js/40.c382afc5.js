(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{358:function(s,e,n){"use strict";n.r(e);var t=n(0),r=Object(t.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"kube-proxy源码解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#kube-proxy源码解析"}},[s._v("#")]),s._v(" kube-proxy源码解析")]),s._v(" "),n("p",[s._v("ipvs相对于iptables模式具备较高的性能与稳定性, 本文讲以此模式的源码解析为主，如果想去了解iptables模式的原理，可以去参考其实现，架构上无差别。")]),s._v(" "),n("p",[s._v("kube-proxy主要功能是监听service和endpoint的事件，然后下放代理策略到机器上。 底层调用"),n("a",{attrs:{href:"https://github.com/docker/libnetwork",target:"_blank",rel:"noopener noreferrer"}},[s._v("docker/libnetwork"),n("OutboundLink")],1),s._v(", 而libnetwork最终调用了"),n("a",{attrs:{href:"https://github.com/vishvananda/netlink",target:"_blank",rel:"noopener noreferrer"}},[s._v("netlink"),n("OutboundLink")],1),s._v(" 与netns来实现ipvs的创建等动作\n")]),s._v(" "),n("h2",{attrs:{id:"初始化配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化配置"}},[s._v("#")]),s._v(" 初始化配置")]),s._v(" "),n("p",[s._v("代码入口："),n("code",[s._v("cmd/kube-proxy/app/server.go")]),s._v(" Run() 函数")]),s._v(" "),n("p",[s._v("通过命令行参数去初始化proxyServer的配置")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("proxyServer, err := NewProxyServer(o)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type ProxyServer struct {\n    // k8s client\n\tClient                 clientset.Interface\n\tEventClient            v1core.EventsGetter\n\n    // ipvs 相关接口\n\tIptInterface           utiliptables.Interface\n\tIpvsInterface          utilipvs.Interface\n\tIpsetInterface         utilipset.Interface\n\n    // 处理同步时的处理器\n\tProxier                proxy.ProxyProvider\n\n    // 代理模式，ipvs iptables userspace kernelspace(windows)四种\n\tProxyMode              string\n    // 配置同步周期\n\tConfigSyncPeriod       time.Duration\n\n    // service 与 endpoint 事件处理器\n\tServiceEventHandler    config.ServiceHandler\n\tEndpointsEventHandler  config.EndpointsHandler\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("Proxier是主要入口，抽象了两个函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type ProxyProvider interface {\n\t// Sync immediately synchronizes the ProxyProvider's current state to iptables.\n\tSync()\n\t// 定期执行\n\tSyncLoop()\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("ipvs 的interface 这个很重要：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type Interface interface {\n\t// 删除所有规则\n\tFlush() error\n\t// 增加一个virtual server\n\tAddVirtualServer(*VirtualServer) error\n\n\tUpdateVirtualServer(*VirtualServer) error\n\tDeleteVirtualServer(*VirtualServer) error\n\tGetVirtualServer(*VirtualServer) (*VirtualServer, error)\n\tGetVirtualServers() ([]*VirtualServer, error)\n\n    // 给virtual server加个realserver, 如 VirtualServer就是一个clusterip realServer就是pod(或者自定义的endpoint)\n\tAddRealServer(*VirtualServer, *RealServer) error\n\tGetRealServers(*VirtualServer) ([]*RealServer, error)\n\tDeleteRealServer(*VirtualServer, *RealServer) error\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("我们在下文再详细看ipvs_linux是如何实现上面接口的")]),s._v(" "),n("p",[s._v("virtual server与realserver, 最重要的是ip:port，然后就是一些代理的模式如sessionAffinity等:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type VirtualServer struct {\n\tAddress   net.IP\n\tProtocol  string\n\tPort      uint16\n\tScheduler string\n\tFlags     ServiceFlags\n\tTimeout   uint32\n}\n\ntype RealServer struct {\n\tAddress net.IP\n\tPort    uint16\n\tWeight  int\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("blockquote",[n("p",[s._v("创建apiserver client")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("client, eventClient, err := createClients(config.ClientConnection, master)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("blockquote",[n("p",[s._v("创建Proxier 这是仅仅关注ipvs模式的proxier")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('else if proxyMode == proxyModeIPVS {\n\t\tglog.V(0).Info("Using ipvs Proxier.")\n\t\tproxierIPVS, err := ipvs.NewProxier(\n\t\t\tiptInterface,\n\t\t\tipvsInterface,\n\t\t\tipsetInterface,\n\t\t\tutilsysctl.New(),\n\t\t\texecer,\n\t\t\tconfig.IPVS.SyncPeriod.Duration,\n\t\t\tconfig.IPVS.MinSyncPeriod.Duration,\n\t\t\tconfig.IPTables.MasqueradeAll,\n\t\t\tint(*config.IPTables.MasqueradeBit),\n\t\t\tconfig.ClusterCIDR,\n\t\t\thostname,\n\t\t\tgetNodeIP(client, hostname),\n\t\t\trecorder,\n\t\t\thealthzServer,\n\t\t\tconfig.IPVS.Scheduler,\n\t\t)\n...\n\t\tproxier = proxierIPVS\n\t\tserviceEventHandler = proxierIPVS\n\t\tendpointsEventHandler = proxierIPVS\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("这个Proxier具备以下方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("   +OnEndpointsAdd(endpoints *api.Endpoints)\n   +OnEndpointsDelete(endpoints *api.Endpoints)\n   +OnEndpointsSynced()\n   +OnEndpointsUpdate(oldEndpoints, endpoints *api.Endpoints)\n   +OnServiceAdd(service *api.Service)\n   +OnServiceDelete(service *api.Service)\n   +OnServiceSynced()\n   +OnServiceUpdate(oldService, service *api.Service)\n   +Sync()\n   +SyncLoop()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("所以ipvs的这个Proxier实现了我们需要的绝大部分接口")]),s._v(" "),n("p",[s._v("小结一下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("     +-----------\x3e endpointHandler\n     |\n     +-----------\x3e serviceHandler\n     |                ^\n     |                | +-------------\x3e sync 定期同步等\n     |                | |\nProxyServer---------\x3e Proxier --------\x3e service 事件回调           \n     |                  |                                                \n     |                  +-------------\x3e endpoint事件回调          \n     |                                             |  触发\n     +-----\x3e ipvs interface ipvs handler     <-----+\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"启动proxyserver"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动proxyserver"}},[s._v("#")]),s._v(" 启动proxyServer")]),s._v(" "),n("ol",[n("li",[s._v("检查是不是带了clean up参数，如果带了那么清除所有规则退出")]),s._v(" "),n("li",[s._v("OOM adjuster貌似没实现，忽略")]),s._v(" "),n("li",[s._v("resouceContainer也没实现，忽略")]),s._v(" "),n("li",[s._v("启动metrics服务器，这个挺重要，比如我们想监控时可以传入这个参数, 包含promethus的 metrics. metrics-bind-address参数")]),s._v(" "),n("li",[s._v("启动informer, 开始监听事件，分别启动协程处理。")])]),s._v(" "),n("p",[s._v("1 2 3 4我们都不用太关注，细看5即可：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("informerFactory := informers.NewSharedInformerFactory(s.Client, s.ConfigSyncPeriod)\n\nserviceConfig := config.NewServiceConfig(informerFactory.Core().InternalVersion().Services(), s.ConfigSyncPeriod)\n// 注册 service handler并启动\nserviceConfig.RegisterEventHandler(s.ServiceEventHandler)\n// 这里面仅仅是把ServiceEventHandler赋值给informer回调 \ngo serviceConfig.Run(wait.NeverStop)\n\nendpointsConfig := config.NewEndpointsConfig(informerFactory.Core().InternalVersion().Endpoints(), s.ConfigSyncPeriod)\n// 注册endpoint \nendpointsConfig.RegisterEventHandler(s.EndpointsEventHandler)\ngo endpointsConfig.Run(wait.NeverStop)\n\ngo informerFactory.Start(wait.NeverStop)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("serviceConfig.Run与endpointConfig.Run仅仅是给回调函数赋值, 所以注册的handler就给了informer, informer监听到事件时就会回调：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('for i := range c.eventHandlers {\n\tglog.V(3).Infof("Calling handler.OnServiceSynced()")\n\tc.eventHandlers[i].OnServiceSynced()\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("那么问题来了，注册进去的这个handler是啥？ 回顾一下上文的")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t\tserviceEventHandler = proxierIPVS\n\t\tendpointsEventHandler = proxierIPVS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("所以都是这个proxierIPVS")]),s._v(" "),n("p",[s._v("handler的回调函数, informer会回调这几个函数，所以我们在自己开发时实现这个interface注册进去即可：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type ServiceHandler interface {\n\t// OnServiceAdd is called whenever creation of new service object\n\t// is observed.\n\tOnServiceAdd(service *api.Service)\n\t// OnServiceUpdate is called whenever modification of an existing\n\t// service object is observed.\n\tOnServiceUpdate(oldService, service *api.Service)\n\t// OnServiceDelete is called whenever deletion of an existing service\n\t// object is observed.\n\tOnServiceDelete(service *api.Service)\n\t// OnServiceSynced is called once all the initial even handlers were\n\t// called and the state is fully propagated to local cache.\n\tOnServiceSynced()\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h2",{attrs:{id:"开始监听"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开始监听"}},[s._v("#")]),s._v(" 开始监听")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("go informerFactory.Start(wait.NeverStop)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("这里执行后，我们创建删除service endpoint等动作都会被监听到，然后回调,回顾一下上面的图，最终都是由Proxier去实现，所以后面我们重点关注Proxier即可")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s.Proxier.SyncLoop()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("然后开始SyncLoop,下文开讲")]),s._v(" "),n("h2",{attrs:{id:"proxier-实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proxier-实现"}},[s._v("#")]),s._v(" Proxier 实现")]),s._v(" "),n("p",[s._v("我们创建一个service时OnServiceAdd方法会被调用, 这里记录一下之前的状态与当前状态两个东西，然后发个信号给syncRunner让它去处理：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("func (proxier *Proxier) OnServiceAdd(service *api.Service) {\n\tnamespacedName := types.NamespacedName{Namespace: service.Namespace, Name: service.Name}\n\tif proxier.serviceChanges.update(&namespacedName, nil, service) && proxier.isInitialized() {\n\t\tproxier.syncRunner.Run()\n\t}\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("记录service 信息,可以看到没做什么事，就是把service存在map里, 如果没变直接删掉map信息不做任何处理：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("change, exists := scm.items[*namespacedName]\nif !exists {\n\tchange = &serviceChange{}\n    // 老的service信息\n\tchange.previous = serviceToServiceMap(previous)\n\tscm.items[*namespacedName] = change\n}\n// 当前监听到的service信息\nchange.current = serviceToServiceMap(current)\n\n如果一样，直接删除\nif reflect.DeepEqual(change.previous, change.current) {\n\tdelete(scm.items, *namespacedName)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("proxier.syncRunner.Run() 里面就发送了一个信号")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("select {\ncase bfr.run <- struct{}{}:\ndefault:\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("这里面处理了这个信号")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s.Proxier.SyncLoop()\n\nfunc (proxier *Proxier) SyncLoop() {\n\t// Update healthz timestamp at beginning in case Sync() never succeeds.\n\tif proxier.healthzServer != nil {\n\t\tproxier.healthzServer.UpdateTimestamp()\n\t}\n\tproxier.syncRunner.Loop(wait.NeverStop)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("runner里收到信号执行，没收到信号会定期执行：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('func (bfr *BoundedFrequencyRunner) Loop(stop <-chan struct{}) {\n\tglog.V(3).Infof("%s Loop running", bfr.name)\n\tbfr.timer.Reset(bfr.maxInterval)\n\tfor {\n\t\tselect {\n\t\tcase <-stop:\n\t\t\tbfr.stop()\n\t\t\tglog.V(3).Infof("%s Loop stopping", bfr.name)\n\t\t\treturn\n\t\tcase <-bfr.timer.C():  // 定期执行\n\t\t\tbfr.tryRun()\n\t\tcase <-bfr.run:\n\t\t\tbfr.tryRun()       // 收到事件信号执行\n\t\t}\n\t}\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("这个bfr runner里我们最需要主意的是一个回调函数，tryRun里检查这个回调是否满足被调度的条件：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('type BoundedFrequencyRunner struct {\n\tname        string        // the name of this instance\n\tminInterval time.Duration // the min time between runs, modulo bursts\n\tmaxInterval time.Duration // the max time between runs\n\n\trun chan struct{} // try an async run\n\n\tmu      sync.Mutex  // guards runs of fn and all mutations\n\tfn      func()      // function to run, 这个回调\n\tlastRun time.Time   // time of last run\n\ttimer   timer       // timer for deferred runs\n\tlimiter rateLimiter // rate limiter for on-demand runs\n}\n\n// 传入的proxier.syncProxyRules这个函数\nproxier.syncRunner = async.NewBoundedFrequencyRunner("sync-runner", proxier.syncProxyRules, minSyncPeriod, syncPeriod, burstSyncs)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("这是个600行左右的搓逼函数，也是处理主要逻辑的地方。")]),s._v(" "),n("h2",{attrs:{id:"syncproxyrules"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#syncproxyrules"}},[s._v("#")]),s._v(" syncProxyRules")]),s._v(" "),n("ol",[n("li",[s._v("设置一些iptables规则，如mark与comment")]),s._v(" "),n("li",[s._v("确定机器上有网卡，ipvs需要绑定地址到上面")]),s._v(" "),n("li",[s._v("确定有ipset，ipset是iptables的扩展，可以给一批地址设置iptables规则\n...(又臭又长，重复代码多，看不下去了，细节问题自己去看吧)")]),s._v(" "),n("li",[s._v("我们最关注的，如何去处理VirtualServer的")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("serv := &utilipvs.VirtualServer{\n\tAddress:   net.ParseIP(ingress.IP),\n\tPort:      uint16(svcInfo.port),\n\tProtocol:  string(svcInfo.protocol),\n\tScheduler: proxier.ipvsScheduler,\n}\nif err := proxier.syncService(svcNameString, serv, false); err == nil {\n\tif err := proxier.syncEndpoint(svcName, svcInfo.onlyNodeLocalEndpoints, serv); err != nil {\n\t}\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("看下实现, 如果没有就创建，如果已存在就更新, 给网卡绑定service的cluster ip：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("func (proxier *Proxier) syncService(svcName string, vs *utilipvs.VirtualServer, bindAddr bool) error {\n\tappliedVirtualServer, _ := proxier.ipvs.GetVirtualServer(vs)\n\tif appliedVirtualServer == nil || !appliedVirtualServer.Equal(vs) {\n\t\tif appliedVirtualServer == nil {\n\t\t\tif err := proxier.ipvs.AddVirtualServer(vs); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t} else {\n\t\t\tif err := proxier.ipvs.UpdateVirtualServer(appliedVirtualServer); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\t// bind service address to dummy interface even if service not changed,\n\t// in case that service IP was removed by other processes\n\tif bindAddr {\n\t\t_, err := proxier.netlinkHandle.EnsureAddressBind(vs.Address.String(), DefaultDummyDevice)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("h2",{attrs:{id:"创建service实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建service实现"}},[s._v("#")]),s._v(" 创建service实现")]),s._v(" "),n("p",[s._v("现在可以去看ipvs的AddVirtualServer的实现了，主要是利用socket与内核进程通信做到的。\n"),n("code",[s._v("pkg/util/ipvs/ipvs_linux.go")]),s._v(" 里 runner结构体实现了这些方法, 这里用到了 docker/libnetwork/ipvs库：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// runner implements Interface.\ntype runner struct {\n\texec       utilexec.Interface\n\tipvsHandle *ipvs.Handle\n}\n\n// New returns a new Interface which will call ipvs APIs.\nfunc New(exec utilexec.Interface) Interface {\n\tihandle, err := ipvs.New("") // github.com/docker/libnetwork/ipvs\n\tif err != nil {\n\t\tglog.Errorf("IPVS interface can\'t be initialized, error: %v", err)\n\t\treturn nil\n\t}\n\treturn &runner{\n\t\texec:       exec,\n\t\tipvsHandle: ihandle,\n\t}\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("New的时候创建了一个特殊的socket, 这里与我们普通的socket编程无差别，关键是syscall.AF_NETLINK这个参数，代表与内核进程通信：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("sock, err := nl.GetNetlinkSocketAt(n, netns.None(), syscall.NETLINK_GENERIC)\n\nfunc getNetlinkSocket(protocol int) (*NetlinkSocket, error) {\n\tfd, err := syscall.Socket(syscall.AF_NETLINK, syscall.SOCK_RAW|syscall.SOCK_CLOEXEC, protocol)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := &NetlinkSocket{\n\t\tfd: int32(fd),\n\t}\n\ts.lsa.Family = syscall.AF_NETLINK\n\tif err := syscall.Bind(fd, &s.lsa); err != nil {\n\t\tsyscall.Close(fd)\n\t\treturn nil, err\n\t}\n\n\treturn s, nil\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("创建一个service, 转换成docker service格式，直接调用:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// AddVirtualServer is part of Interface.\nfunc (runner *runner) AddVirtualServer(vs *VirtualServer) error {\n\teSvc, err := toBackendService(vs)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn runner.ipvsHandle.NewService(eSvc)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("然后就是把service信息打包，往socket里面写即可：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\nfunc (i *Handle) doCmdwithResponse(s *Service, d *Destination, cmd uint8) ([][]byte, error) {\n\treq := newIPVSRequest(cmd)\n\treq.Seq = atomic.AddUint32(&i.seq, 1)\n\n\tif s == nil {\n\t\treq.Flags |= syscall.NLM_F_DUMP                    //Flag to dump all messages\n\t\treq.AddData(nl.NewRtAttr(ipvsCmdAttrService, nil)) //Add a dummy attribute\n\t} else {\n\t\treq.AddData(fillService(s))\n\t} // 把service塞到请求中\n\n\tif d == nil {\n\t\tif cmd == ipvsCmdGetDest {\n\t\t\treq.Flags |= syscall.NLM_F_DUMP\n\t\t}\n\n\t} else {\n\t\treq.AddData(fillDestinaton(d))\n\t}\n\n    // 给内核进程发送service信息\n\tres, err := execute(i.sock, req, 0)\n\tif err != nil {\n\t\treturn [][]byte{}, err\n\t}\n\n\treturn res, nil\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("blockquote",[n("p",[s._v("构造请求")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("func newIPVSRequest(cmd uint8) *nl.NetlinkRequest {\n\treturn newGenlRequest(ipvsFamily, cmd)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("在构造请求时传入的是ipvs协议簇")]),s._v(" "),n("p",[s._v("然后构造一个与内核通信的消息头")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("func NewNetlinkRequest(proto, flags int) *NetlinkRequest {\n\treturn &NetlinkRequest{\n\t\tNlMsghdr: syscall.NlMsghdr{\n\t\t\tLen:   uint32(syscall.SizeofNlMsghdr),\n\t\t\tType:  uint16(proto),\n\t\t\tFlags: syscall.NLM_F_REQUEST | uint16(flags),\n\t\t\tSeq:   atomic.AddUint32(&nextSeqNr, 1),\n\t\t},\n\t}\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("blockquote",[n("p",[s._v("给消息加Data,这个Data是个数组，需要实现两个方法：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type NetlinkRequestData interface {\n\tLen() int  // 长度\n\tSerialize() []byte // 序列化, 内核通信也需要一定的数据格式，service信息也需要实现\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("比如 header是这样序列化的, 一看愣住了，思考好久才看懂：\n拆下看：\n("),n("em",[s._v("[unsafe.Sizeof("),n("em",[s._v("hdr)]byte) 一个")]),s._v("[]byte类型，长度就是结构体大小\n(unsafe.Pointer(hdr))把结构体转成byte指针类型\n加个")]),s._v("取它的值\n用[:]转成byte返回")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("func (hdr *genlMsgHdr) Serialize() []byte {\n\treturn (*(*[unsafe.Sizeof(*hdr)]byte)(unsafe.Pointer(hdr)))[:]\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("blockquote",[n("p",[s._v("发送service信息给内核")])]),s._v(" "),n("p",[s._v("一个很普通的socket发送接收数据")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('func execute(s *nl.NetlinkSocket, req *nl.NetlinkRequest, resType uint16) ([][]byte, error) {\n\tvar (\n\t\terr error\n\t)\n\n\tif err := s.Send(req); err != nil {\n\t\treturn nil, err\n\t}\n\n\tpid, err := s.GetPid()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar res [][]byte\n\ndone:\n\tfor {\n\t\tmsgs, err := s.Receive()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfor _, m := range msgs {\n\t\t\tif m.Header.Seq != req.Seq {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif m.Header.Pid != pid {\n\t\t\t\treturn nil, fmt.Errorf("Wrong pid %d, expected %d", m.Header.Pid, pid)\n\t\t\t}\n\t\t\tif m.Header.Type == syscall.NLMSG_DONE {\n\t\t\t\tbreak done\n\t\t\t}\n\t\t\tif m.Header.Type == syscall.NLMSG_ERROR {\n\t\t\t\terror := int32(native.Uint32(m.Data[0:4]))\n\t\t\t\tif error == 0 {\n\t\t\t\t\tbreak done\n\t\t\t\t}\n\t\t\t\treturn nil, syscall.Errno(-error)\n\t\t\t}\n\t\t\tif resType != 0 && m.Header.Type != resType {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tres = append(res, m.Data)\n\t\t\tif m.Header.Flags&syscall.NLM_F_MULTI == 0 {\n\t\t\t\tbreak done\n\t\t\t}\n\t\t}\n\t}\n\treturn res, nil\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br")])]),n("blockquote",[n("p",[s._v("Service 数据打包\n这里比较细，核心思想就是内核只认一定格式的标准数据，我们把service信息按其标准打包发送给内核即可。\n至于怎么打包的就不详细讲了。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('func fillService(s *Service) nl.NetlinkRequestData {\n\tcmdAttr := nl.NewRtAttr(ipvsCmdAttrService, nil)\n\tnl.NewRtAttrChild(cmdAttr, ipvsSvcAttrAddressFamily, nl.Uint16Attr(s.AddressFamily))\n\tif s.FWMark != 0 {\n\t\tnl.NewRtAttrChild(cmdAttr, ipvsSvcAttrFWMark, nl.Uint32Attr(s.FWMark))\n\t} else {\n\t\tnl.NewRtAttrChild(cmdAttr, ipvsSvcAttrProtocol, nl.Uint16Attr(s.Protocol))\n\t\tnl.NewRtAttrChild(cmdAttr, ipvsSvcAttrAddress, rawIPData(s.Address))\n\n\t\t// Port needs to be in network byte order.\n\t\tportBuf := new(bytes.Buffer)\n\t\tbinary.Write(portBuf, binary.BigEndian, s.Port)\n\t\tnl.NewRtAttrChild(cmdAttr, ipvsSvcAttrPort, portBuf.Bytes())\n\t}\n\n\tnl.NewRtAttrChild(cmdAttr, ipvsSvcAttrSchedName, nl.ZeroTerminated(s.SchedName))\n\tif s.PEName != "" {\n\t\tnl.NewRtAttrChild(cmdAttr, ipvsSvcAttrPEName, nl.ZeroTerminated(s.PEName))\n\t}\n\tf := &ipvsFlags{\n\t\tflags: s.Flags,\n\t\tmask:  0xFFFFFFFF,\n\t}\n\tnl.NewRtAttrChild(cmdAttr, ipvsSvcAttrFlags, f.Serialize())\n\tnl.NewRtAttrChild(cmdAttr, ipvsSvcAttrTimeout, nl.Uint32Attr(s.Timeout))\n\tnl.NewRtAttrChild(cmdAttr, ipvsSvcAttrNetmask, nl.Uint32Attr(s.Netmask))\n\treturn cmdAttr\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("Service总体来讲代码比较简单，但是觉得有些地方实现的有点绕，不够简单直接。 总体来说就是监听apiserver事件，然后比对 处理，定期也会去执行同步策略.")])])}),[],!1,null,null,null);e.default=r.exports}}]);